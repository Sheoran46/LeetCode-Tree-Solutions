/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Queue<Node> queue=new LinkedList<>();
        if(root==null || (root.left==null && root.right==null))
        return root;
        Node toreturn=root;
        queue.add(root);
        queue.add(null);
        Node prev=root.left;
        while(!queue.isEmpty()){
            Node temp=queue.poll();
            if(prev!=null)
            prev.next=temp;
            prev=temp;
            if(temp==null){
                if(queue.isEmpty())
                break;
                else
                queue.add(null);
            }else{
                if(temp.left!=null)
                queue.add(temp.left);
                if(temp.right!=null)
                queue.add(temp.right);
            }
        }
        root.next=null;
        return root;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        queue.add(null);
        while(!queue.isEmpty()){
            List<Integer> list1=new ArrayList<>();
            TreeNode currNode=queue.remove();
            if(currNode==null){
                if(queue.isEmpty()){
                    break;
                }else{
                    queue.add(null);
                }
            }else{
                TreeNode newNode=currNode;
                while(newNode!=null && !queue.isEmpty()){
                    list1.add(newNode.val);
                    if(newNode.left!=null){
                        queue.add(newNode.left);
                    }
                    if(newNode.right!=null){
                         queue.add(newNode.right);
                    }
                    newNode=queue.remove();
                }
            }
            queue.add(null);
            list.add(list1);
        }
        return list;
    }
}
